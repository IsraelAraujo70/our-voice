name: CI

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

env:
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: test_db
  POSTGRES_USER: postgres

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install UV
      run: pip install uv

    - name: Install dependencies
      working-directory: ./backend
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e ".[dev]"

    - name: Run backend checks
      working-directory: ./backend
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: 'true'
      run: |
        source .venv/bin/activate
        python manage.py check
        python manage.py migrate --run-syncdb

    - name: Run backend tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: 'true'
      run: |
        source .venv/bin/activate
        pytest --cov=apps --cov-report=xml --cov-fail-under=80

    - name: Run backend linting
      working-directory: ./backend
      run: |
        source .venv/bin/activate
        ruff check .
        ruff format --check .

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        flags: backend

  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: bun install

    - name: Run frontend linting
      working-directory: ./frontend
      run: bun run lint

    - name: Run frontend tests
      working-directory: ./frontend
      run: bun run test:coverage

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/coverage-final.json
        flags: frontend

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2

    - name: Install dependencies
      working-directory: ./frontend
      run: bun install

    - name: Install Playwright browsers
      working-directory: ./frontend
      run: bunx playwright install --with-deps

    - name: Start services
      run: |
        docker compose up -d
        sleep 30

    - name: Wait for services to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/api/health/ 2>/dev/null; do sleep 5; done'
        timeout 60 bash -c 'until curl -f http://localhost:3000 2>/dev/null; do sleep 5; done'

    - name: Run E2E tests
      working-directory: ./frontend
      run: bun run test:e2e

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: frontend/playwright-report/

    - name: Stop services
      if: always()
      run: docker compose down